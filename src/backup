import React, { useState, useEffect, useRef } from 'react'
import './split-landing-page.css'
// import { SCROLL_CONTENT } from '../../constants/imageConstant'

const SplitLandingPage = () => {
  const OneRef = useRef(null)
  const TwoRef = useRef(null)

  //   const [hovered, setHovered] = useState(false)
  const [isLeft, setIsLeft] = useState(false)
  const [isRight, setIsRight] = useState(false)

  const mouseLeftEnterChangeHandler = () => {
    console.log('mouse enter left')
    setIsLeft(true)
  }

  const mouseLeftLeaveChangeHandler = () => {
    console.log('mouse leave left')
    setIsLeft(false)
  }

  const mouseRightEnterChangeHandler = () => {
    console.log('mouse enter right')
    setIsRight(false)
  }

  const mouseRightLeaveChangeHandler = () => {
    console.log('mouse leave right')
    setIsRight(true)
  }

  useEffect(() => {
    const nodeOne = OneRef.current
    const nodeTwo = TwoRef.current
    if (nodeOne) {
      nodeOne.addEventListener('mouseenter', mouseLeftEnterChangeHandler)
      nodeOne.addEventListener('mouseleave', mouseLeftLeaveChangeHandler)
      return () => {
        nodeOne.removeEventListener('mouseenter', mouseLeftEnterChangeHandler)
        nodeOne.removeEventListener('mouseleave', mouseLeftLeaveChangeHandler)
      }
    }
    if (nodeTwo) {
      nodeTwo.addEventListener('mouseenter', mouseRightEnterChangeHandler)
      nodeTwo.addEventListener('mouseleave', mouseRightLeaveChangeHandler)
      return () => {
        nodeTwo.removeEventListener('mouseenter', mouseRightEnterChangeHandler)
        nodeTwo.removeEventListener('mouseleave', mouseRightLeaveChangeHandler)
      }
    }
  }, [OneRef.current, TwoRef.current])

  return (
    <div className="App-split-landing-page">
      <div
        // ref={ref}
        onMouseEnter={mouseLeftEnterChangeHandler}
        onMouseLeave={mouseLeftLeaveChangeHandler}
        className="container-split-landing-page"
      >
        <div
          ref={OneRef}
          className={`split left ${isLeft ? 'hover-right' : 'hover-left'}`}
        >
          <h1 className="split-heading">Play Rammy Game</h1>
          <a href="#" className="btn-split">
            Buy Now
          </a>
        </div>
        <div
          ref={TwoRef}
          className={`split right ${isRight ? 'hover-right' : 'hover-left'}`}
        >
          <h1 className="split-heading">XBox Series Now</h1>
          <a href="#" className="btn-split">
            Buy Now
          </a>
        </div>
      </div>
    </div>
  )
}

export default SplitLandingPage




///////// form-wave ///////////

import React, { useState, useEffect, useRef } from 'react'
import './form-wave-animation.css'
import { useTrail, animated as a } from 'react-spring'
// import { SCROLL_CONTENT } from '../../constants/imageConstant'

const items = ['Email', 'Password']
const config = { mass: 5, tension: 2000, friction: 200 }

const FormWaveAnimation = () => {
  //   const [hovered, setHovered] = useState(false)
  const [toggle, set] = useState(true)
  const trail = useTrail(items.length, {
    config,
    // opacity: toggle ? 1 : 0,
    x: toggle ? 0 : -10,
    // height: toggle ? 80 : 0
    // from: { opacity: 0, x: 20, height: 0 }
  })

  return (
    <div className="App-split-landing-page">
      <div className="container-form-wave">
        <h1>Please Login</h1>
        <div class="form">
          {trail.map(({ x, height, ...rest }, index) => (
            <div class="form-control">
              <a.div
                key={items[index]}
                // className="trails-text"
                style={{
                  ...rest,
                  transform: x.interpolate((x) => `translate3d(0,${x}px,0)`),
                }}
              >
                <label className="label-wave" style={{ height }}>
                  {items[index]}
                </label>
              </a.div>
              <input
                onClick={() => set((state) => !state)}
                type="text"
                required
              />
            </div>
          ))}
          {/* <div class="form-control">
            <input onClick={() => set((state) => !state)} type="password" required />
            <label>Password</label>
          </div> */}
          <button class="btn-wave">Login</button>
          <p class="text-msg">
            Don't have any account?<a href="#">Register</a>
          </p>
        </div>
      </div>
    </div>
  )
}

export default FormWaveAnimation


////////// split landing animation //////////

import React, { useState, useEffect, useRef } from 'react'
import './split-landing-page.css'
// import { SCROLL_CONTENT } from '../../constants/imageConstant'

const SplitLandingPage = () => {
  const ref = useRef()
  const refed = useRef()

  const [hovered, setHovered] = useState(false)
  const [ishovered, setIsHovered] = useState(true)

  const mouseLeftEnterChangeHandler = () => {
    console.log('mouse enter left')
    setHovered(true)
  }

  const mouseLeftLeaveChangeHandler = () => {
    console.log('mouse leave left')
    setHovered(false)
  }

  const mouseRightEnterChangeHandler = () => {
    console.log('mouse enter right')
    setIsHovered(false)
  }

  const mouseRightLeaveChangeHandler = () => {
    console.log('mouse leave right')
    setIsHovered(true)
  }

  useEffect(
    () => {
      const node = ref.current
      if (node) {
        node.addEventListener('mouseenter', mouseLeftEnterChangeHandler)
        node.addEventListener('mouseleave', mouseLeftLeaveChangeHandler)
        return () => {
          node.removeEventListener('mouseenter', mouseLeftEnterChangeHandler)
          node.removeEventListener('mouseleave', mouseLeftLeaveChangeHandler)
        }
      }
    },
    [ref.current] // Recall only if ref changes
  )

  useEffect(
    () => {
      const noded = refed.current
      if (noded) {
        noded.addEventListener('mouseenter', mouseRightEnterChangeHandler)
        noded.addEventListener('mouseleave', mouseRightLeaveChangeHandler)
        return () => {
          noded.removeEventListener('mouseenter', mouseRightEnterChangeHandler)
          noded.removeEventListener('mouseleave', mouseRightLeaveChangeHandler)
        }
      }
    },
    [refed.current] // Recall only if ref changes
  )

  return (
    <div className="App-split-landing-page">
      <div
        ref={ref}
        // onMouseEnter={mouseEnterChangeHandler}
        // onMouseLeave={mouseLeaveChangeHandler}
        // className={`container-split-landing-page ${
        //   hovered ? 'hover-right' : 'hover-left'
        // }`}
        className="container-split-landing-page"
      >
        <div
          // className="split left"
          className={`split left ${hovered ? 'hover-right' : 'hover-left'}`}
        >
          <h1 className="split-heading">Play Rammy Game</h1>
          <a href="#" className="btn-split">
            Buy Now
          </a>
        </div>
        <div
          // className="split right"
          className={`split right ${hovered ? 'hover-right' : 'hover-left'}`}
        >
          <h1 className="split-heading">XBox Series Now</h1>
          <a href="#" className="btn-split">
            Buy Now
          </a>
        </div>
      </div>
    </div>
  )
}

export default SplitLandingPage



//////////////// old split landing animation ////////////

import React, { useState, useEffect, useRef } from 'react'
import './split-landing-page.css'
// import { SCROLL_CONTENT } from '../../constants/imageConstant'

const SplitLandingPage = () => {
  const ref = useRef(null)
  const [hovered, setHovered] = useState(false)

  const mouseEnterChangeHandler = () => {
    console.log('mouse enter')
    setHovered(true)
  }

  const mouseLeaveChangeHandler = () => {
    console.log('mouse leave')
    setHovered(false)
  }

  useEffect(
    () => {
      const node = ref.current
      if (node) {
        node.addEventListener('mouseenter', mouseEnterChangeHandler)
        node.addEventListener('mouseleave', mouseLeaveChangeHandler)
        return () => {
          node.removeEventListener('mouseenter', mouseEnterChangeHandler)
          node.removeEventListener('mouseleave', mouseLeaveChangeHandler)
        }
      }
    },
    [ref.current] // Recall only if ref changes
  )

  return (
    <div className="App-split-landing-page">
      <div
        ref={ref}
        // onMouseEnter={mouseEnterChangeHandler}
        // onMouseLeave={mouseLeaveChangeHandler}
        className={`container-split-landing-page ${
          hovered ? 'hover-right' : 'hover-left'
        }`}
      >
        <div className="split left">
          <h1 className="split-heading">Play Rammy Game</h1>
          <a href="#" className="btn-split">
            Buy Now
          </a>
        </div>
        <div className="split right">
          <h1 className="split-heading">XBox Series Now</h1>
          <a href="#" className="btn-split">
            Buy Now
          </a>
        </div>
      </div>
    </div>
  )
}

export default SplitLandingPage




///////// incrementing counter ///////////


import React, { useState, useEffect } from 'react'
import './incrementing-counter.css'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import {
  faYoutube,
  faFacebook,
  faTwitter,
} from '@fortawesome/free-brands-svg-icons'

const IncrementingCounter = () => {
  // const [selected, setSelected] = useState(false)
  // const [count, setCounter] = useState(0)
  const [count, setCount] = useState(0)
  const [countInTimeout, setCountInTimeout] = useState(0)






  useEffect(() => {
    setTimeout(() => {
      setCountInTimeout(count) // count is 0 here
    }, 3000)
    setCount(5) // Update count to be 5 after timeout is scheduled
  }, [])

  // const getCounterChangeHandler = () => {
  //   // setCounter((prevCounter) => prevCounter + 1)
  // }

  return (
    <div className="App-incrementing-counter">
      <div class="counter-container">
        <div>
          <FontAwesomeIcon icon={faTwitter} size="3x" />
        </div>
        <div class="counter" data-target="15000">
          15000
        </div>
        <span>Twitter Followers</span>
      </div>

      <div class="counter-container">
        <div>
          <FontAwesomeIcon icon={faYoutube} size="3x" />
        </div>
        <div class="counter" data-target="5000">
          5000
        </div>
        <span>YouTube Subscriber</span>
      </div>

      <div class="counter-container">
        <div>
          <FontAwesomeIcon icon={faFacebook} size="3x" />
        </div>
        <div class="counter" data-target="7500">
          7500
        </div>
        <span>Facebook</span>
      </div>
    </div>
  )
}

export default IncrementingCounter



////////////////////// drawing App //////////////////


import React, { useRef, useEffect, useState } from 'react'
import './drawing-app.css'

const DrawingApp = (props) => {
  const canvasRef = useRef(null)
  const [isOffsetX, setIsOffsetX] = useState()
  const [isOffsetY, setIsOffsetY] = useState()
  const [isOffsetX2, setIsOffsetX2] = useState()
  const [isOffsetY2, setIsOffsetY2] = useState()

  const [isPressed, setIsPressed] = useState(false)

  let color = '#000'
  //   let isPress = false
  let size = 20
  let x
  let y
  //   let x2
  //   let y2

  const mouseDownChangeHandler = (e) => {
    // isPress = true
    setIsPressed(true)
    setIsOffsetX(e.nativeEvent.offsetX)
    setIsOffsetY(e.nativeEvent.offsetY)

    // x = e.nativeEvent.offsetX
    // y = e.nativeEvent.offsetY
    console.log(isPressed, isOffsetX, isOffsetY)
  }

  const mouseUpChangeHandler = () => {
    // isPress = false
    setIsPressed(false)
    setIsOffsetX(undefined)
    setIsOffsetY(undefined)

    // x = undefined
    // y = undefined
    console.log(isPressed, isOffsetX, isOffsetY)
  }

  const mouseMoveChangeHandler = (e) => {
    if (isPressed) {
      setIsOffsetX2(e.nativeEvent.offsetX)
      setIsOffsetY2(e.nativeEvent.offsetY)

      // drawCircle(isOffsetX2, isOffsetY2)
      // drawLine(isOffsetX, isOffsetY, isOffsetX2, isOffsetY2)

      console.log(isOffsetX2, isOffsetY2)
      setIsOffsetX(isOffsetX2)
      setIsOffsetY(isOffsetY2)
    }
  }

  const drawCircle = (x, y, ctx) => {
    ctx.beginPath()
    ctx.arc(x, y, size, 0, Math.PI * 2)
    ctx.fillStyle = color
    ctx.fill()
  }

  const drawLine = (x1, y1, x2, y2, ctx) => {
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.lineWidth = size * 2
    ctx.stroke()
  }

  useEffect(() => {
    const canvas = canvasRef.current
    const ctx = canvas.getContext('2d')

    //Our draw come here
    drawCircle(100, 100, ctx)
    drawLine(300, 300, 300, 500, ctx)
  }, [])

  return (
    <div className="App-drawing-app">
      <canvas
        onMouseDown={mouseDownChangeHandler}
        onMouseUp={mouseUpChangeHandler}
        onMouseMove={mouseMoveChangeHandler}
        ref={canvasRef}
        {...props}
        height="800px"
        width="800px"
      />
      <div className="toolbox">
        <button id="decrease">-</button>
        <span id="size">20</span>
        <button id="increase">+</button>
        <input id="color" type="color" />
        <button id="clear">X</button>
      </div>
    </div>
  )
}

export default DrawingApp



/////////---------//////////////


import React, { useRef, useEffect, useState } from 'react'
import './drawing-app.css'

const DrawingApp = (props) => {
  const canvasRef = useRef(null)
  const [isOffset, setIsOffset] = useState()

  let color = '#000'
  let isPress = false
  let size = 20
  let x
  let y
  let x2
  let y2

  const mouseDownChangeHandler = (e) => {
    isPress = true
    setIsOffset()
    x = e.nativeEvent.offsetX
    y = e.nativeEvent.offsetY
    console.log(isPress, x, y)
  }

  const mouseUpChangeHandler = () => {
    isPress = false
    x = undefined
    y = undefined
    console.log(isPress, x, y)
  }

  const mouseMoveChangeHandler = (e) => {
    if (isPress) {
      x2 = e.nativeEvent.offsetX
      y2 = e.nativeEvent.offsetY

      console.log(x2, y2)

      //   drawCircle(x2, y2)
      //   drawLine(x, y, x2, y2)

      x = x2
      y = y2
    }

    // console.log(isPress, x, y)
  }

  const drawCircle = (x, y, ctx) => {
    ctx.beginPath()
    ctx.arc(x, y, size, 0, Math.PI * 2)
    ctx.fillStyle = color
    ctx.fill()
  }

  const drawLine = (x1, y1, x2, y2, ctx) => {
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.lineWidth = size * 2
    ctx.stroke()
  }

  useEffect(() => {
    const canvas = canvasRef.current
    const context = canvas.getContext('2d')

    //Our draw come here
    // drawCircle(100, 100, ctx)
    // drawLine(300, 300, 300, 500, ctx)
    drawCircle(x2, y2, context)
    drawLine(x, y, x2, y2, context)
  }, [drawCircle, drawLine])

  return (
    <div className="App-drawing-app">
      <canvas
        onMouseDown={mouseDownChangeHandler}
        onMouseUp={mouseUpChangeHandler}
        onMouseMove={mouseMoveChangeHandler}
        ref={canvasRef}
        {...props}
        height="800px"
        width="800px"
      />
      <div className="toolbox">
        <button id="decrease">-</button>
        <span id="size">20</span>
        <button id="increase">+</button>
        <input id="color" type="color" />
        <button id="clear">X</button>
      </div>
    </div>
  )
}

export default DrawingApp








/////////////////////////////////////////////////////
import React, { useRef, useEffect, useState } from 'react'
import './drawing-app.css'

const DrawingApp = () => {
  const canvasRef = useRef(null)
  const [isOffset, setIsOffset] = useState()

  let color = '#000'
  let isPress = false
  let size = 20
  let x
  let y
  let x2
  let y2

  const mouseDownChangeHandler = (e) => {
    isPress = true
    setIsOffset()
    x = e.nativeEvent.offsetX
    y = e.nativeEvent.offsetY
    console.log(isPress, x, y)
  }

  const mouseUpChangeHandler = () => {
    isPress = false
    x = undefined
    y = undefined
    console.log(isPress, x, y)
  }

  const mouseMoveChangeHandler = (e) => {
    if (isPress) {
      x2 = e.nativeEvent.offsetX
      y2 = e.nativeEvent.offsetY

      console.log(x2, y2)

      //   drawCircle(x2, y2)
      //   drawLine(x, y, x2, y2)

      x = x2
      y = y2
    }

    // console.log(isPress, x, y)
  }

  const drawCircle = (x, y, ctx) => {
    ctx.beginPath()
    ctx.arc(x, y, size, 0, Math.PI * 2)
    ctx.fillStyle = color
    ctx.fill()
  }

  const drawLine = (x1, y1, x2, y2, ctx) => {
    ctx.beginPath()
    ctx.moveTo(x1, y1)
    ctx.lineTo(x2, y2)
    ctx.strokeStyle = color
    ctx.lineWidth = size * 2
    ctx.stroke()
  }

  useEffect(() => {
    const canvas = canvasRef.current
    const context = canvas.getContext('2d')

    // drawCircle(100, 100, ctx)
    // drawLine(300, 300, 300, 500, ctx)

    drawCircle(x2, y2, context)
    drawLine(x, y, x2, y2, context)
  }, [drawCircle, drawLine])

  return (
    <div className="App-drawing-app">
      <canvas
        onMouseDown={mouseDownChangeHandler}
        onMouseUp={mouseUpChangeHandler}
        onMouseMove={mouseMoveChangeHandler}
        ref={canvasRef}
        // {...props}
        height="800px"
        width="800px"
      />
      <div className="toolbox">
        <button id="decrease">-</button>
        <span id="size">20</span>
        <button id="increase">+</button>
        <input id="color" type="color" />
        <button id="clear">X</button>
      </div>
    </div>
  )
}

export default DrawingApp





import React, { useEffect, useState } from 'react'
import './content-placeholder.css'

const ContentPlaceholder = () => {
  const [header, setHeader] = useState()
  const [title, setTitle] = useState()
  const [excerpt, setExcerpt] = useState()
  const [profileImg, setProfileImg] = useState()
  const [name, setName] = useState()
  const [date, setDate] = useState()
  const [animated_bgs, setAnimated_bgs] = useState(false)
  const [animated_bg_texts, setAnimated_bg_texts] = useState()

  const getData = () => {
    setHeader(
      <img
        src="https://images.unsplash.com/photo-1522735338363-cc7313be0ae0?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=2689&q=80"
        alt="Image"
      />
    )
    setTitle('Lorem ipsum dolor sit')
    setExcerpt('Lorem ipsum dolor sit nam in, assumenda accusantium at!')
    setProfileImg(
      <img src="https://randomuser.me/api/portraits/men/45.jpg" alt="profile" />
    )
    setName('Jone Doe')
    setDate('Jun 04, 2021')
    setAnimated_bgs(!animated_bgs)
    setAnimated_bg_texts(!animated_bg_texts)
  }

  setTimeout(getData, 2500)

  return (
    <div className="App-content-placeholder">
      <div className="card">
        <div
          className={`card-header ${animated_bgs ? 'animated-bg' : ''}`}
          id="header"
        >
          {header}
        </div>

        <div className="card-container">
          <h3
            className={`card-title ${animated_bgs ? 'animated-bg' : ''} ${
              animated_bg_texts ? 'animated-bg-text' : ''
            }`}
            id="title"
          >
            {title}
          </h3>
          <p className="card-excerpt" id="excerpt">
            {excerpt}
            <span
              className={`${animated_bgs ? 'animated-bg' : ''} ${
                animated_bg_texts ? 'animated-bg-text' : ''
              }`}
            >
              &nbsp;
            </span>
            <span
              className={`${animated_bgs ? 'animated-bg' : ''} ${
                animated_bg_texts ? 'animated-bg-text' : ''
              }`}
            >
              &nbsp;
            </span>
            <span
              className={`${animated_bgs ? 'animated-bg' : ''} ${
                animated_bg_texts ? 'animated-bg-text' : ''
              }`}
            >
              &nbsp;
            </span>
          </p>

          <div className="author">
            <div
              className={`profile-img  ${animated_bgs ? 'animated-bg' : ''} ${
                animated_bg_texts ? 'animated-bg-text' : ''
              }`}
              id="profile_img"
            >
              {profileImg}
            </div>
            <div className="author-info">
              <strong
                className={`${animated_bgs ? 'animated-bg' : ''} ${
                  animated_bg_texts ? 'animated-bg-text' : ''
                }`}
                id="name"
              >
                {name}
              </strong>
              <small
                className={`${animated_bgs ? 'animated-bg' : ''} ${
                  animated_bg_texts ? 'animated-bg-text' : ''
                }`}
                id="date"
              >
                {date}
              </small>
            </div>
          </div>
        </div>
      </div>
    </div>
  )
}

export default ContentPlaceholder











//////////////////////////////////////////

import React, { useState, useEffect } from 'react'
import './note-app.css'

const NoteApp = () => {
  const [notes, setNotes] = useState([])
  const [noteEditing, setNoteEditing] = useState('')

  const addNote = (e) => {
    // e.preventDefault()
    const newNote = {
      id: Math.random().toString(36).substr(2, 9),
      text: e.target.note.value,
    }
    setNotes([...notes, newNote])
    e.target.note.value = ''
  }

  const deleteNote = (idToDelete) => {
    const filteredNotes = notes.filter((note) => note.id !== idToDelete)
    setNotes(filteredNotes)
  }

  const submitEdits = (event, idToEdit) => {
    event.preventDefault()
    const updatedNotes = notes.map((note) => {
      if (note.id === idToEdit) {
        return {
          id: note.id,
          text: event.target.note.value,
        }
      } else {
        return note
      }
    })
    setNotes(updatedNotes)
    setNoteEditing('')
  }

  useEffect(() => {
    const json = localStorage.getItem('notes')
    const savedNotes = JSON.parse(json)
    if (savedNotes) {
      setNotes(savedNotes)
    }
  }, [])

  return (
    <div className="App-note-app">
      <form onSubmit={addNote}>
        {/* <input type="Submit" className="add" id="add" /> */}
        {/* <i className="fas fa-plus"></i> Add note */}
        {/* </input> */}
        <imput type="text" name="note" />
        <input type="Submit" />
      </form>
      {notes.map((note) => (
        <div key={note.id}>
          {note.id !== noteEditing ? (
            <div>{note.text}</div>
          ) : (
            <form onSubmit={(e) => submitEdits(e, note.id)}>
              <textarea name="note" defaultValue={note.text}></textarea>
              <button type="Submit"> Submit Edits</button>
            </form>
          )}
          {/* <button onClick={() => deleteNote(note.id)}>delete</button>
          <button onClick={() => setNoteEditing(note.id)}>edit</button> */}
          <div className="tools">
            <button onClick={() => setNoteEditing(note.id)} className="edit">
              <i className="fas fa-edit"></i>
            </button>
            <button onClick={() => deleteNote(note.id)} className="delete">
              <i className="fas fa-trash-alt"></i>
            </button>
          </div>
          {/* <div className={`main ${note ? '' : 'hidden'}`}></div>
          <textarea className={`${note ? 'hidden' : ''}`}></textarea> */}
        </div>
      ))}
    </div>
  )
}

export default NoteApp




//////////////////////////////////////////////////////////////////////////

import React, { useEffect, useState } from 'react'
import './image-carousal.css'

const ImageData = [
  {
    id: 1,
    src: 'https://images.unsplash.com/photo-1599394022918-6c2776530abb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1458&q=80',
    name: 'first-image',
  },
  {
    id: 2,
    src: 'https://images.unsplash.com/photo-1593642632559-0c6d3fc62b89?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80',
    name: 'second-image',
  },
  {
    id: 3,
    src: 'https://images.unsplash.com/photo-1599423300746-b62533397364?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80',
    name: 'third-image',
  },
  {
    id: 4,
    src: 'https://images.unsplash.com/photo-1599561046251-bfb9465b4c44?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1492&q=80',
    name: 'fourth-image',
  },
]

const ImageCarousal = () => {
  //   let idx = 0
  let interval = setInterval(run, 2000)
  const [selected, setSelected] = useState(0)
  const [imgs, setImgs] = useState()

  function run() {
    // idx++
    setSelected((data) => data + 1)
    changeImage()
  }

  function changeImage() {
    if (selected > ImageData.length - 1) {
      setSelected(0)
    } else if (selected < 0) {
      setSelected(ImageData.length - 1)
    }

    setImgs(`translateX(${-selected * 500}px)`)
    console.log(selected)
  }

  function resetInterval() {
    clearInterval(interval)
    interval = setInterval(run, 2000)
  }

  function getRightChnageHandler() {
    setSelected((data) => data + 1)
    changeImage()
    resetInterval()
  }

  function getLeftChnageHandler() {
    setSelected((data) => data - 1)
    changeImage()
    resetInterval()
  }
  //   useEffect(() => {}, [])

  return (
    <div className="App-image-carousals">
      <div className="container-carousel">
        <div className="image-container" style={{ transform: imgs }} id="imgs">
          {ImageData.map((data, index) => (
            <img
              //   className={`img-carousal ${
              //     currentSlider === index ? 'active' : ''
              //   }`}
              className="img-carousal"
              key={index}
              src={data.src}
              alt={data.name}
            />
          ))}
        </div>

        <div className="buttons-container-btn">
          <button
            onClick={getLeftChnageHandler}
            id="left"
            className="btn-btnned btn-btnned-prev"
          >
            Prev
          </button>
          <button
            onClick={getRightChnageHandler}
            id="right"
            className="btn-btnned btn-btnned-next"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  )
}

export default ImageCarousal





/////////////idx///////////////

import React, { useEffect, useState } from 'react'
import useSlider from "./useSlider";
import './image-carousal.css'

const ImageData = [
  {
    id: 1,
    src: 'https://images.unsplash.com/photo-1599394022918-6c2776530abb?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1458&q=80',
    name: 'first-image',
  },
  {
    id: 2,
    src: 'https://images.unsplash.com/photo-1593642632559-0c6d3fc62b89?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80',
    name: 'second-image',
  },
  {
    id: 3,
    src: 'https://images.unsplash.com/photo-1599423300746-b62533397364?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1500&q=80',
    name: 'third-image',
  },
  {
    id: 4,
    src: 'https://images.unsplash.com/photo-1599561046251-bfb9465b4c44?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1492&q=80',
    name: 'fourth-image',
  },
]

const ImageCarousal = () => {
  let idx = 0
  let interval = setInterval(run, 2000)
  //   const [selected, setSelected] = useState()
  const [imgs, setImgs] = useState()

  //   console.log(ImageData.src)

  function run() {
    idx++
    changeImage()
  }

  function changeImage() {
    if (idx > ImageData.length - 1) {
      idx = 0
    } else if (idx < 0) {
      idx = ImageData.length - 1
    }

    setImgs(-idx * 500)
    // console.log(idx)
  }

  function resetInterval() {
    clearInterval(interval)
    interval = setInterval(run, 2000)
  }

  function getRightChnageHandler() {
    idx++
    changeImage()
    resetInterval()
  }

  function getLeftChnageHandler() {
    idx--
    changeImage()
    resetInterval()
  }

  return (
    <div className="App-image-carousals">
      <div className="container-carousel">
        <div className="image-container" style={{ transform: imgs }} id="imgs">
          {ImageData.map((data, index) => (
            <img
              //   className={`img-carousal ${
              //     currentSlider === index ? 'active' : ''
              //   }`}
              className="img-carousal"
              key={index}
              src={data.src}
              alt={data.name}
            />
          ))}
        </div>

        <div className="buttons-container-btn">
          <button
            onClick={getLeftChnageHandler}
            id="left"
            className="btn-btnned btn-btnned-prev"
          >
            Prev
          </button>
          <button
            onClick={getRightChnageHandler}
            id="right"
            className="btn-btnned btn-btnned-next"
          >
            Next
          </button>
        </div>
      </div>
    </div>
  )
}

export default ImageCarousal








/////////////////////////// pokemon ////////////////////////////


import React, { useState } from 'react'
import './pokedex.css'

const Pokedex = () => {
  const [pokemonData, setPokemonData] = useState()
  const pokemon_count = 150
  const colors = {
    fire: '#FDDFDF',
    grass: '#DEFDE0',
    electric: '#FCF7DE',
    water: '#DEF3FD',
    ground: '#f4e7da',
    rock: '#d5d5d4',
    fairy: '#fceaff',
    poison: '#98d7a5',
    bug: '#f8d5a3',
    dragon: '#97b3e6',
    psychic: '#eaeda1',
    flying: '#F5F5F5',
    fighting: '#E6E0D4',
    normal: '#F5F5F5',
  }

  const fetchPokemons = async () => {
    for (let i = 1; i <= pokemon_count; i++) {
      await getPokemon(i)
    }
  }

  const getPokemon = async (id) => {
    const url = `https://pokeapi.co/api/v2/pokemon/${id}`
    const res = await fetch(url)
    const data = await res.json()
    getPokemonData(data)
    // console.log(data)
  }

  fetchPokemons()

  const getPokemonData = (poke) => {
    poke.map((data, index) => (
      <div
        key={index}
        className="pokemon"
        style={{ backgroundColor: 'rgb(222, 253, 224)' }}
      >
        <div className="poke-img-container">
          <img
            // src="https://pokeres.bastionbot.org/images/pokemon/1.png"
            src={`https://pokeres.bastionbot.org/images/pokemon/${data.id}.png`}
            alt="pokemon"
          />
        </div>

        <div className="poke-info">
          <span className="poke-number">#001</span>
          <h3 className="poke-name">{data.name}</h3>
          <small className="poke-type">
            Type: <span>grass</span>
          </small>
        </div>
      </div>
    ))
  }

  return (
    <div className="App-pokedex">
      <h1 className="poke-heading">Pokedex</h1>
      <div className="poke-container" id="poke-container">
        {getPokemonData()}
        {/* {pokemonData.map((poke, index) => (
          <div
            key={index}
            className="pokemon"
            style={{ backgroundColor: 'rgb(222, 253, 224)' }}
          >
            <div className="poke-img-container">
              <img
                // src="https://pokeres.bastionbot.org/images/pokemon/1.png"
                src={`https://pokeres.bastionbot.org/images/pokemon/${poke.id}.png`}
                alt="pokemon"
              />
            </div>

            <div className="poke-info">
              <span className="poke-number">#001</span>
              <h3 className="poke-name">{poke.name}</h3>
              <small className="poke-type">
                Type: <span>grass</span>
              </small>
            </div>
          </div>
        ))} */}
      </div>
    </div>
  )
}

export default Pokedex



/////////////////////////////////pokedex fetchdata///////////////////////////////////////////



import React, { useEffect, useState } from 'react'
import './pokedex.css'

const Pokedex = () => {
  const [pokemonData, setPokemonData] = useState([])
  const pokemon_count = 20
  const colors = {
    fire: '#FDDFDF',
    grass: '#DEFDE0',
    electric: '#FCF7DE',
    water: '#DEF3FD',
    ground: '#f4e7da',
    rock: '#d5d5d4',
    fairy: '#fceaff',
    poison: '#98d7a5',
    bug: '#f8d5a3',
    dragon: '#97b3e6',
    psychic: '#eaeda1',
    flying: '#F5F5F5',
    fighting: '#E6E0D4',
    normal: '#F5F5F5',
  }

  //   const fetchPokemons = async () => {
  //     for (let i = 1; i <= pokemon_count; i++) {
  //       await getPokemon(i)
  //     }
  //   }

  const getPokemon = async (id) => {
    // const url = `https://pokeapi.co/api/v2/pokemon/${id}`
    const url = `https://pokeapi.co/api/v2/pokemon`
    const res = await fetch(url)
    const data = await res.json()
    setPokemonData(data.results)
    console.log(data.results, data)
  }

  const getPokemonDetails = async (data) => {
    // const url = `https://pokeapi.co/api/v2/pokemon`
    const res = await fetch(data)
    // const data1 = await res.json()
    // setPokemonData(data1)
    console.log('getPokemonDetails', res)
  }

  useEffect(() => {
    getPokemon()
  }, [])

  return (
    <div className="App-pokedex">
      <h1 className="poke-heading">Pokedex</h1>
      <div className="poke-container" id="poke-container">
        {pokemonData.length > 0 &&
          pokemonData.map((data, index) => (
            <div
              onClick={() => {
                getPokemonDetails(data)
              }}
              key={index}
              className="pokemon"
              style={{ backgroundColor: 'rgb(222, 253, 224)' }}
            >
              <div className="poke-img-container">
                <img
                  src={`https://pokeres.bastionbot.org/images/pokemon/${
                    index + 1
                  }.png`}
                  // src={`https://pokeres.bastionbot.org/images/pokemon/${data.id}.png`}
                  alt="pokemon"
                />
              </div>

              <div className="poke-info">
                <span className="poke-number">#001</span>
                <h3 className="poke-name">{data.name}</h3>
                <small className="poke-type">
                  Type: <span>grass</span>
                </small>
              </div>
            </div>
          ))}
      </div>
    </div>
  )
}

export default Pokedex


/////////////////////////////////////pokedex /////////////////

import React, { useEffect, useState } from 'react'
import './pokedex.css'

const Pokedex = () => {
  const [pokemonData, setPokemonData] = useState([])
  const pokemon_count = 20
  const colors = {
    fire: '#FDDFDF',
    grass: '#DEFDE0',
    electric: '#FCF7DE',
    water: '#DEF3FD',
    ground: '#f4e7da',
    rock: '#d5d5d4',
    fairy: '#fceaff',
    poison: '#98d7a5',
    bug: '#f8d5a3',
    dragon: '#97b3e6',
    psychic: '#eaeda1',
    flying: '#F5F5F5',
    fighting: '#E6E0D4',
    normal: '#F5F5F5',
  }

  const fetchPokemons = async () => {
    for (let i = 1; i <= pokemon_count; i++) {
      await getPokemon(i)
    }
  }

  const getPokemon = async (id) => {
    const url = `https://pokeapi.co/api/v2/pokemon/${id}`
    const res = await fetch(url)
    const data = await res.json()
    getPokeData(data)
    // console.log(data)
  }

  const getPokeData = (poke) => {
    console.log('find Data', poke)
    return (
      <div
        className="pokemon"
        style={{ backgroundColor: 'rgb(222, 253, 224)' }}
      >
        <div className="poke-img-container">
          <img
            // src="https://pokeres.bastionbot.org/images/pokemon/1.png"
            src={`https://pokeres.bastionbot.org/images/pokemon/${poke.id}.png`}
            alt={poke.name}
          />
        </div>
        <div className="poke-info">
          <span className="poke-number">#001</span>
          <h3 className="poke-name">{poke.name}</h3>
          <small className="poke-type">
            Type: <span>grass</span>
          </small>
        </div>
      </div>
    )
  }

  useEffect(() => {
    fetchPokemons()
  }, [])

  return (
    <div className="App-pokedex">
      <h1 className="poke-heading">Pokedex</h1>
      <div className="poke-container" id="poke-container">
        {getPokeData}
        {/* {pokemonData.map((data, index) => (
          <div
            key={index}
            className="pokemon"
            style={{ backgroundColor: 'rgb(222, 253, 224)' }}
          >
            <div className="poke-img-container">
              <img
                src="https://pokeres.bastionbot.org/images/pokemon/1.png"
                // src={`https://pokeres.bastionbot.org/images/pokemon/${data.id}.png`}
                alt="pokemon"
              />
            </div>

            <div className="poke-info">
              <span className="poke-number">#001</span>
              <h3 className="poke-name">{data.name}</h3>
              <small className="poke-type">
                Type: <span>grass</span>
              </small>
            </div>
          </div>
        ))} */}
      </div>
    </div>
  )
}

export default Pokedex




//////////////////////////////custom range slider//////////////////////////////////////////

import React, { useState } from 'react'
import './custom-range-slider.css'

const CustomRangeSlider = () => {
  const [range, setRange] = useState()
  const [valued, setValued] = useState(50)

  const getlabelChangeHandler = (e) => {
    const value = +e.target.value
    const label = e.target.nextElementSibling

    const range_width = getComputedStyle(e.target).getPropertyValue('width')
    const label_width = getComputedStyle(label).getPropertyValue('width')

    const num_width = +range_width.substring(0, range_width.length - 2)
    const num_label_width = +label_width.substring(0, label_width.length - 2)

    const max = +e.target.max
    const min = +e.target.min

    const left =
      value * (num_width / max) -
      num_label_width / 2 +
      scale(value, min, max, 10, -10)

    setRange(left)
    setValued(value)
    // console.log(left)
  }

  const scale = (num, in_min, in_max, out_min, out_max) => {
    return ((num - in_min) * (out_max - out_min)) / (in_max - in_min) + out_min
  }

  return (
    <div className="App-range-slider">
      <h2 className="range-h2">Custom Range Slider</h2>
      <div className="range-container">
        <input
          onClick={getlabelChangeHandler}
          type="range"
          id="range"
          min="0"
          max="100"
        />
        <label style={{ left: `${range}px` }} htmlFor="range">
          {valued}
        </label>
      </div>
    </div>
  )
}

export default CustomRangeSlider










/////////////////// Quiz App ////////////////////////


import React, { useEffect, useState } from 'react'
import './quiz-app.css'

const quizData = [
  {
    question: 'Which language runs in a web browser?',
    a: 'Java',
    b: 'C',
    c: 'Python',
    d: 'JavaScript',
    correct: 'd',
  },
  {
    question: 'What does CSS stand for?',
    a: 'Central Style Sheets',
    b: 'Cascading Style Sheets',
    c: 'Cascading Simple Sheets',
    d: 'Cars SUVs Sailboats',
    correct: 'b',
  },
  {
    question: 'What does HTML stand for?',
    a: 'Hypertext Markup Language',
    b: 'Hypertext Markdown Language',
    c: 'Hyperloop Machine Language',
    d: 'Helicopters Terminals Motorboats Lamborginis',
    correct: 'a',
  },
  {
    question: 'What year was JavaScript launched?',
    a: '1996',
    b: '1995',
    c: '1994',
    d: 'none of the above',
    correct: 'b',
  },
]

const QuizApp = () => {
  //   const [currentQuizDataSelect, setCurrentQuizDataSelect] = useState()
  //   const [answerEl, setAnswerEl] = useState()
  let currentQuiz = 0
  let score = 0

  //   const currentQuizData = quizData[currentQuiz]

  return (
    <div className="App-quiz">
      <div className="quiz-container" id="quiz">
        { quizData[0].map((data) => (
          <div className="quiz-header">
            <h2 className="quiz-h2" id="question">
              {data.question}
            </h2>

            <ul>
              <li>
                <input type="radio" name="answer" id="a" className="answer" />
                &nbsp;
                <label htmlFor="a" id="a_text">
                  {data.a}
                </label>
              </li>

              <li>
                <input type="radio" name="answer" id="b" className="answer" />
                &nbsp;
                <label htmlFor="b" id="b_text">
                  {data.b}
                </label>
              </li>

              <li>
                <input type="radio" name="answer" id="c" className="answer" />
                &nbsp;
                <label htmlFor="c" id="c_text">
                  {data.c}
                </label>
              </li>

              <li>
                <input type="radio" name="answer" id="d" className="answer" />
                &nbsp;
                <label htmlFor="d" id="d_text">
                  {data.d}
                </label>
              </li>
            </ul>
          </div>
        ))}

        <button className="quiz-submit" id="submit">
          Submit
        </button>
      </div>
    </div>
  )
}

export default QuizApp






//////////////////////////////////////


import { faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import React, { useEffect, useState } from 'react'
import './testimonial-box.css'

const testimonials = [
  {
    name: 'Miyah Myles',
    position: 'Marketing',
    photo:
      'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=707b9c33066bf8808c934c8ab394dff6',
    text: "I've worked with literally hundreds of HTML/CSS developers and I have to say the top spot goes to this guy. This guy is an amazing developer. He stresses on good, clean code and pays heed to the details. I love developers who respect each and every aspect of a throughly thought out design and do their best to put it in code. He goes over and beyond and transforms ART into PIXELS - without a glitch, every time.",
  },
  {
    name: 'June Cha',
    position: 'Software Engineer',
    photo: 'https://randomuser.me/api/portraits/women/44.jpg',
    text: 'This guy is an amazing frontend developer that delivered the task exactly how we need it, do your self a favor and hire him, you will not be disappointed by the work delivered. He will go the extra mile to make sure that you are happy with your project. I will surely work again with him!',
  },
  {
    name: 'Iida Niskanen',
    position: 'Data Entry',
    photo: 'https://randomuser.me/api/portraits/women/68.jpg',
    text: "This guy is a hard worker. Communication was also very good with him and he was very responsive all the time, something not easy to find in many freelancers. We'll definitely repeat with him.",
  },
  {
    name: 'Renee Sims',
    position: 'Receptionist',
    photo: 'https://randomuser.me/api/portraits/women/65.jpg',
    text: "This guy does everything he can to get the job done and done right. This is the second time I've hired him, and I'll hire him again in the future.",
  },
  {
    name: 'Jonathan Nunfiez',
    position: 'Graphic Designer',
    photo: 'https://randomuser.me/api/portraits/men/43.jpg',
    text: "I had my concerns that due to a tight deadline this project can't be done. But this guy proved me wrong not only he delivered an outstanding work but he managed to deliver 1 day prior to the deadline. And when I asked for some revisions he made them in MINUTES. I'm looking forward to work with him again and I totally recommend him. Thanks again!",
  },
  {
    name: 'Sasha Ho',
    position: 'Accountant',
    photo:
      'https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg?h=350&auto=compress&cs=tinysrgb',
    text: 'This guy is a top notch designer and front end developer. He communicates well, works fast and produces quality work. We have been lucky to work with him!',
  },
  {
    name: 'Veeti Seppanen',
    position: 'Director',
    photo: 'https://randomuser.me/api/portraits/men/97.jpg',
    text: 'This guy is a young and talented IT professional, proactive and responsible, with a strong work ethic. He is very strong in PSD2HTML conversions and HTML/CSS technology. He is a quick learner, eager to learn new technologies. He is focused and has the good dynamics to achieve due dates and outstanding results.',
  },
]

const TestimonialBox = () => {
//   const [index, setIndex] = useState(1)
  let idx = 1

  //   const { name, position, photo, text } = testimonials[idx]

  function updateTestimonial() {
    // setIndex((prev) => prev + 1)

    idx++

    if (idx > testimonials.length - 1) {
      idx = 0
    }

    // console.log(idx, testimonials.length)
  }

  useEffect(() => {
    setInterval(updateTestimonial(), 1000)
  }, [])

  return (
    <div className="App-testimonial">
      {testimonials.length > 0 &&
        testimonials[idx].map((data, index) => (
          <div key={index} className="testimonial-container">
            <div className="progress-bar-testimonial"></div>
            <div className="fa-quote-right fa-quote">
              <FontAwesomeIcon icon={faQuoteRight} />
            </div>
            <div className="fa-quote-left fa-quote">
              <FontAwesomeIcon icon={faQuoteLeft} />
            </div>
            <p className="testimonial">{data.text}</p>
            <div className="user-testimonial">
              <img
                src={data.photo}
                alt={data.name}
                className="user-image-testimonial"
              />
              <div className="user-details-testimonial">
                <h4 className="username-testimonial">{data.name}</h4>
                <p className="role-testimonial">{data.position}</p>
              </div>
            </div>
          </div>
        ))}
    </div>
  )
}

export default TestimonialBox

\/
//
/\
//
\/

//////////////////////////////////////////////////////////

import { faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import React, { useEffect, useState } from 'react'
import './testimonial-box.css'

const testimonials = [
  {
    name: 'Miyah Myles',
    position: 'Marketing',
    photo:
      'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=707b9c33066bf8808c934c8ab394dff6',
    text: "I've worked with literally hundreds of HTML/CSS developers and I have to say the top spot goes to this guy. This guy is an amazing developer. He stresses on good, clean code and pays heed to the details. I love developers who respect each and every aspect of a throughly thought out design and do their best to put it in code. He goes over and beyond and transforms ART into PIXELS - without a glitch, every time.",
  },
  {
    name: 'June Cha',
    position: 'Software Engineer',
    photo: 'https://randomuser.me/api/portraits/women/44.jpg',
    text: 'This guy is an amazing frontend developer that delivered the task exactly how we need it, do your self a favor and hire him, you will not be disappointed by the work delivered. He will go the extra mile to make sure that you are happy with your project. I will surely work again with him!',
  },
  {
    name: 'Iida Niskanen',
    position: 'Data Entry',
    photo: 'https://randomuser.me/api/portraits/women/68.jpg',
    text: "This guy is a hard worker. Communication was also very good with him and he was very responsive all the time, something not easy to find in many freelancers. We'll definitely repeat with him.",
  },
  {
    name: 'Renee Sims',
    position: 'Receptionist',
    photo: 'https://randomuser.me/api/portraits/women/65.jpg',
    text: "This guy does everything he can to get the job done and done right. This is the second time I've hired him, and I'll hire him again in the future.",
  },
  {
    name: 'Jonathan Nunfiez',
    position: 'Graphic Designer',
    photo: 'https://randomuser.me/api/portraits/men/43.jpg',
    text: "I had my concerns that due to a tight deadline this project can't be done. But this guy proved me wrong not only he delivered an outstanding work but he managed to deliver 1 day prior to the deadline. And when I asked for some revisions he made them in MINUTES. I'm looking forward to work with him again and I totally recommend him. Thanks again!",
  },
  {
    name: 'Sasha Ho',
    position: 'Accountant',
    photo:
      'https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg?h=350&auto=compress&cs=tinysrgb',
    text: 'This guy is a top notch designer and front end developer. He communicates well, works fast and produces quality work. We have been lucky to work with him!',
  },
  {
    name: 'Veeti Seppanen',
    position: 'Director',
    photo: 'https://randomuser.me/api/portraits/men/97.jpg',
    text: 'This guy is a young and talented IT professional, proactive and responsible, with a strong work ethic. He is very strong in PSD2HTML conversions and HTML/CSS technology. He is a quick learner, eager to learn new technologies. He is focused and has the good dynamics to achieve due dates and outstanding results.',
  },
]

const TestimonialBox = () => {
  const [index, setIndex] = useState(0)
  const [name, setName] = useState()
  const [photo, setPhoto] = useState()
  const [text, setText] = useState()
  const [position, setPosition] = useState()

  //   let idx = 1

  function updateTestimonial() {
    const { name, position, photo, text } = testimonials[index]
    setName(name)
    setPhoto(photo)
    setText(text)
    setPosition(position)
    setIndex((prev) => prev + 1)

    // idx++

    if (index > testimonials.length - 1) {
      index = 0
    }

    // console.log(idx, testimonials.length)
  }

  useEffect(() => {
    setInterval(updateTestimonial(), 1000)
  }, [])

  return (
    <div className="App-testimonial">
      <div className="testimonial-container">
        <div className="progress-bar-testimonial"></div>
        <div className="fa-quote-right fa-quote">
          <FontAwesomeIcon icon={faQuoteRight} />
        </div>
        <div className="fa-quote-left fa-quote">
          <FontAwesomeIcon icon={faQuoteLeft} />
        </div>
        <p className="testimonial">{text}</p>
        <div className="user-testimonial">
          <img src={photo} alt={name} className="user-image-testimonial" />
          <div className="user-details-testimonial">
            <h4 className="username-testimonial">{name}</h4>
            <p className="role-testimonial">{position}</p>
          </div>
        </div>
      </div>
    </div>
  )
}

export default TestimonialBox









/////////////////////////////////////////////////////


import { faQuoteLeft, faQuoteRight } from '@fortawesome/free-solid-svg-icons'
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'
import React, { useEffect, useState } from 'react'
import './testimonial-box.css'

const testimonials = [
  {
    name: 'Miyah Myles',
    position: 'Marketing',
    photo:
      'https://images.unsplash.com/photo-1494790108377-be9c29b29330?ixlib=rb-0.3.5&q=80&fm=jpg&crop=entropy&cs=tinysrgb&w=200&fit=max&s=707b9c33066bf8808c934c8ab394dff6',
    text: "I've worked with literally hundreds of HTML/CSS developers and I have to say the top spot goes to this guy. This guy is an amazing developer. He stresses on good, clean code and pays heed to the details. I love developers who respect each and every aspect of a throughly thought out design and do their best to put it in code. He goes over and beyond and transforms ART into PIXELS - without a glitch, every time.",
  },
  {
    name: 'June Cha',
    position: 'Software Engineer',
    photo: 'https://randomuser.me/api/portraits/women/44.jpg',
    text: 'This guy is an amazing frontend developer that delivered the task exactly how we need it, do your self a favor and hire him, you will not be disappointed by the work delivered. He will go the extra mile to make sure that you are happy with your project. I will surely work again with him!',
  },
  {
    name: 'Iida Niskanen',
    position: 'Data Entry',
    photo: 'https://randomuser.me/api/portraits/women/68.jpg',
    text: "This guy is a hard worker. Communication was also very good with him and he was very responsive all the time, something not easy to find in many freelancers. We'll definitely repeat with him.",
  },
  {
    name: 'Renee Sims',
    position: 'Receptionist',
    photo: 'https://randomuser.me/api/portraits/women/65.jpg',
    text: "This guy does everything he can to get the job done and done right. This is the second time I've hired him, and I'll hire him again in the future.",
  },
  {
    name: 'Jonathan Nunfiez',
    position: 'Graphic Designer',
    photo: 'https://randomuser.me/api/portraits/men/43.jpg',
    text: "I had my concerns that due to a tight deadline this project can't be done. But this guy proved me wrong not only he delivered an outstanding work but he managed to deliver 1 day prior to the deadline. And when I asked for some revisions he made them in MINUTES. I'm looking forward to work with him again and I totally recommend him. Thanks again!",
  },
  {
    name: 'Sasha Ho',
    position: 'Accountant',
    photo:
      'https://images.pexels.com/photos/415829/pexels-photo-415829.jpeg?h=350&auto=compress&cs=tinysrgb',
    text: 'This guy is a top notch designer and front end developer. He communicates well, works fast and produces quality work. We have been lucky to work with him!',
  },
  {
    name: 'Veeti Seppanen',
    position: 'Director',
    photo: 'https://randomuser.me/api/portraits/men/97.jpg',
    text: 'This guy is a young and talented IT professional, proactive and responsible, with a strong work ethic. He is very strong in PSD2HTML conversions and HTML/CSS technology. He is a quick learner, eager to learn new technologies. He is focused and has the good dynamics to achieve due dates and outstanding results.',
  },
]

const TestimonialBox = () => {
  //   const [index, setIndex] = useState(0)
  let idx = 1

  //   const { name, position, photo, text } = testimonials[idx]

  //   const currentTestimonial = testimonials[index]

  //   console.log(testimonials.length)

  //   function updateTestimonial() {
  //     // setIndex((prev) => prev + 1)

  //     idx++

  //     if (idx > testimonials.length - 1) {
  //       idx = 0
  //     }

  //     // console.log(idx, testimonials.length)
  //   }

  //   useEffect(() => {
  //     setInterval(updateTestimonial(), 1000)
  //   }, [])

  return (
    <div className="App-testimonial">
      {testimonials.length > 0 &&
        testimonials[idx].map((data, index) => (
          <div key={index} className="testimonial-container">
            <div className="progress-bar-testimonial"></div>
            <div className="fa-quote-right fa-quote">
              <FontAwesomeIcon icon={faQuoteRight} />
            </div>
            <div className="fa-quote-left fa-quote">
              <FontAwesomeIcon icon={faQuoteLeft} />
            </div>
            <p className="testimonial">{data.text}</p>
            <div className="user-testimonial">
              <img
                src={data.photo}
                alt={data.name}
                className="user-image-testimonial"
              />
              <div className="user-details-testimonial">
                <h4 className="username-testimonial">{data.name}</h4>
                <p className="role-testimonial">{data.position}</p>
              </div>
            </div>
          </div>
        ))}
    </div>
  )
}

export default TestimonialBox








/////////////////////////////////\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\



import React, { useEffect, useState } from 'react'
import './random-image-feed.css'

const RandomImageFeed = () => {
  const unsplashURL = 'https://source.unsplash.com/random/'
  const rows = 5
  const [randomImage, setRandomImage] = useState()

  useEffect(() => {
    // const container = document.querySelector('.random-image-container')

    for (let i = 0; i < rows * 3; i++) {
      //   console.log(`${unsplashURL}${getRandomSize()}`)
      setRandomImage(
        <img src={`${unsplashURL}${getRandomSize()}`} alt="image" />
      )
      console.log(randomImage)
      //   const img = document.createElement('img')
      //   img.src = `${unsplashURL}${getRandomSize()}`
      //   container.appendChild(img)
    }
  }, [])

  //   console.log(`${unsplashURL}${getRandomSize()}`)

  function getRandomSize() {
    // console.log(`${getRandomNr()}x${getRandomNr()}`)
    return `${getRandomNr()}x${getRandomNr()}`
  }

  function getRandomNr() {
    return Math.floor(Math.random() * 10) + 300
  }

  return (
    <div className="App-testimonial">
      <h1 className="title-random">Random Image Feed</h1>
      <div className="random-image-container">
        {/* <img src={`${unsplashURL}${getRandomSize()}`} alt="images" /> */}
        {/* {randomImage} */}
        {/* {randomImage.map((data) => (
          <img src={data} alt="images" />
        ))} */}
      </div>
    </div>
  )
}

export default RandomImageFeed

/////////???????????//////////??????????////////??????????????//////////////??????


import React, { useEffect, useState } from 'react'
import './random-image-feed.css'

const RandomImageFeed = () => {
  const unsplashURL = 'https://source.unsplash.com/random/'
  const rows = 5
  //   const [randomImage, setRandomImage] = useState()

  //   useEffect(() => {
  //     // const container = document.querySelector('.random-image-container')

  //     for (let i = 0; i < rows * 3; i++) {
  //       console.log(`${unsplashURL}${getRandomSize()}`)
  //       setRandomImage(`${unsplashURL}${getRandomSize()}`)
  //       console.log(randomImage)
  //       //   const img = document.createElement('img')
  //       //   img.src = `${unsplashURL}${getRandomSize()}`
  //       //   container.appendChild(img)
  //     }
  //   }, [])

  //   console.log(`${unsplashURL}${getRandomSize()}`)

  function getRandomSize() {
    // console.log(`${getRandomNr()}x${getRandomNr()}`)
    return `${getRandomNr()}x${getRandomNr()}`
  }

  function getRandomNr() {
    return Math.floor(Math.random() * 10) + 300
  }

  return (
    <div className="App-testimonial">
      <h1 className="title-random">Random Image Feed</h1>
      <div className="random-image-container">
        {() => {
          for (let i = 0; i < rows * 3; i++) {
            console.log(`${unsplashURL}${getRandomSize()}`)
            rows.push(
              <img src={`${unsplashURL}${getRandomSize()}`} alt="images" />
            )
          }
          return rows
        }}
        {/* <img src={`${unsplashURL}${getRandomSize()}`} alt="images" /> */}
        {/* {randomImage} */}
        {/* {randomImage.map((data) => (
          <img src={data} alt="images" />
        ))} */}
      </div>
    </div>
  )
}

export default RandomImageFeed

///////////////////////?????????????????//////////?????????////??///??//??///



import React, { useState } from 'react'
import './toast-notification.css'

const messages = ['Message One', 'Message Two', 'Message Three', 'Message Four']

const ToastsNotification = () => {
  const [toast, setToast] = useState('')
  const [msg, setMsg] = useState(messages)

  const createNotification = () => {
    setMsg(toast)
    // console.log(123)
    // setToast(() => getRandomMessage())
  }

  // const getRandomMessage = () => {
  //   // console.log(messages[Math.floor(Math.random() * messages.length)])
  //   return messages[Math.floor(Math.random() * messages.length)]
  // }

  return (
    <div className="toast-container">
      <div id="toasts">
        {/* <div className="toast-notific">{toast}</div> */}
        {/* <div className="toast">Toast Number2</div> */}
      </div>

      <button onClick={createNotification} className="btn-notific" id="button">
        Show Notification
      </button>
    </div>
  )
}

export default ToastsNotification



///////////////////////?????????????????/////?????????????////?????????????///???????//?????///??//?//?/?//



import React from 'react'
import { Link } from 'react-router-dom'
import './Home.css'
import { PROJECT_DATA } from './constants/project-data'

const Home = () => {
  return (
    <>
      <div className="App-home">
        <header className="header-our-profile">
          <div>
            <h1 className="header-name">Rohit Chauhan</h1>
            <p>rohitstarrc@gmail.com</p>
          </div>
        </header>

        <div className="main-header">
          <h1>React Projects</h1>
        </div>

        <main className="main-project">
          {PROJECT_DATA.ourProject.map((item, index) => (
            <div key={index} className="movie-app-project">
              <Link to={item.link}>
                <img src={item.url} alt={item.title} />
                <div className="movie-info-project">
                  <h3>{item.title}</h3>
                  {/* <p>{item.des}</p> */}
                </div>
              </Link>
            </div>
          ))}
        </main>
      </div>
      {/* 
      <div
        style={{
          display: 'flex',
          flexDirection: 'column',
          margin: '50px',
        }}
      >
        <Link to="/expending-card">01 Expending Card</Link>
        <Link to="/progress-step">02 Progress Steps</Link>
        <Link to="/rotating-navigation">03 Rotating Navigation</Link>
        <Link to="/hidden-search-widget">04 Hidden Search</Link>
        <Link to="/blurry-loading">05 Blurry Loading</Link>
        <Link to="/scroll-animation">06 Scroll Animation</Link>
        <Link to="/split-landing-page">07 Split Landing Page(U)</Link>
        <Link to="/form-wave-animation">08 Form Wave Animation</Link>
        <Link to="/sound-board">09 Sound Board</Link>
        <Link to="/dad-joke">10 Dad Jokes</Link>
        <Link to="/event-key-code">11 Event Key Code</Link>
        <Link to="/faq-collapse">12 FAQ Collapse</Link>
        <Link to="/random-choice-picker">13 Random Choice Picker (U)</Link>
        <Link to="/animated-navigation">14 Animated Navigation</Link>
        <Link to="/incrementing-counter">15 Incrementing Counter</Link>
        <Link to="/drink-water">16 Drink Water</Link>
        <Link to="/movie-app">17 Movies App</Link>
        <Link to="/background-slider">18 Background Slider</Link>
        <Link to="/clock-theme">19 Clock Theme</Link>
        <Link to="/button-ripple-effect">20 Button Ripple Effect(U)</Link>
        <Link to="/drag-n-drop">21 Drag And Drop(U)</Link>
        <Link to="/drawing-app">22 Drawing App(U)</Link>
        <Link to="/kinetic-loader">23 kinetic Loader</Link>
        <Link to="/content-placeholder">24 Content Placeholder</Link>
        <Link to="/sticky-navbar">25 Sticky Navbar</Link>
        <Link to="/double-vertical">26 Double Vertical</Link>
        <Link to="/github-profile">27 Github Profile</Link>
        <Link to="/toast-notification">28 Toast Notification</Link>

        <Link to="/auto-text-effect">30 Auto Text Effect</Link>
        <Link to="/password-generator">31 Password Generator</Link>
        <Link to="/checkboxes">32 Checkboxes</Link>
        <Link to="/note-app">33 Note App</Link>
        <Link to="/count-down">34 Count Down(U)</Link>
        <Link to="/image-carousal">35 Image Carousal</Link>
        <Link to="/hoverboard">36 Hoverboard[some work]</Link>
        <Link to="/pokedex">37 Pokedex[1359-1350]</Link>
        <Link to="/mobile-app-navigation">38 Mobile App Navigation</Link>
        <Link to="/password-strength">39 Password Strength Background</Link>
        <Link to="/3d-background-boxes">40 3D Background Boxes</Link>
        <Link to="/verify-account">41 Verify Account UI(U)</Link>
        <Link to="/live-user-filter">42 Live User Filter</Link>
        <Link to="/feedback-ui-design">43 Feedback UI Design[U]</Link>
        <Link to="/custom-range-slider">44 Custom Range Slider</Link>
        <Link to="/netflix-navigation">45 Netflix Mobile Navigation</Link>
        <Link to="/quiz-app">46 Quiz App(U)</Link>
        <Link to="/testimonial-box">47 Testimonial Box(C.P.)</Link>
        <Link to="/random-image-feed">48 Random Image Feed</Link>
        <Link to="/todo-list">49 Todo List</Link>
        <Link to="/insect-catch-game">50 Insect Catch Game</Link>
        <Link to="/card-project">Card</Link>
      </div> */}
    </>
  )
}
export default Home



/////////////////\\\\\\\\\\\\\\\\\\\


import React, { useState, useRef } from 'react'
import ListCard from './listCard'
import { LISTITEM } from '../../constants/ListData'
import './list.css'

const List = () => {
  const dragList = useRef()
  const dragOverList = useRef()
  const [list, setList] = useState(LISTITEM.listEl)

  const handleDragStart = (e, idx) => {
    dragList.current = idx
    // console.log(e.target.innerHTML)
    // console.log(idx)
    // console.log(dragList.current)
  }

  const handleDragEnter = (e, idx) => {
    dragOverList.current = idx
    // console.log(e.target.innerHTML)
    // console.log(idx)
    // console.log(dragList.current)
    const listItems = [...list]
    // console.log(dragList.current, dragOverList.current)
    console.log(listItems)
    const dragListContent = listItems[dragList.current]
    listItems.splice(dragList.current, 1)
    listItems.splice(dragOverList.current, 0, dragListContent)
    dragList.current = dragOverList.current
    dragOverList.current = null
    setList(listItems)
  }

  return (
    <div className="Container">
      <header>
        <h1>Draggable List Items</h1>
      </header>
      <ul className="user-list">
        {list.map((item, index) => (
          <li
            key={index}
            onDragStart={(e) => handleDragStart(e, index)}
            // onDragOver={(e) => e.preventDefault()}
            onDragEnter={(e) => handleDragEnter(e, index)}
            draggable
          >
            <ListCard title={item.title} />
          </li>
        ))}
      </ul>
    </div>
  )
}

export default List




/////////////////////csss????????????????????????


/* .btn-navbar {
  cursor: pointer;
  display: inline-block;
  width: 100%;
  background-color: #22254b;
  padding: 10px;
  font-size: 18px;
  font-family: inherit;
  border: 0;
  border-radius: 5px;
  transition: 0.3s ease;
  box-shadow: 0px 10px 10px -10px rgba(0, 0, 0, 0.25);
}

.btn-navbar a {
  color: #fff;
  font-weight: bold;
  text-decoration: none;
}

.btn-navbar a:focus {
  outline: 0;
}

.btn-navbar:hover {
  background-color: rgb(225, 221, 228);
}

.btn-navbar a:hover {
  color: #22254b;
}

.btn-navbar:active {
  transform: scale(1.2);
  background-color: rgb(225, 221, 228);
  color: #22254b;
} */

.navbar-nav {
  list-style-type: none;
  margin: 0;
  padding: 0;
}

.navbar-nav a {
  --c: goldenrod;
  color: var(--c);
  font-size: 16px;
  border: 0.3em solid var(--c);
  border-radius: 0.5em;
  width: 12em;
  height: 3em;
  text-transform: uppercase;
  font-weight: bold;
  font-family: sans-serif;
  letter-spacing: 0.1em;
  text-align: center;
  line-height: 3em;
  position: relative;
  overflow: hidden;
  z-index: 1;
  transition: 0.5s;
  margin: 1em;
}

.navbar-nav a span {
  position: absolute;
  width: 25%;
  height: 100%;
  background-color: var(--c);
  transform: translateY(150%);
  border-radius: 50%;
  left: calc((var(--n) - 1) * 25%);
  transition: 0.5s;
  transition-delay: calc((var(--n) - 1) * 0.1s);
  z-index: -1;
}

.navbar-nav a:hover {
  color: black;
}

.navbar-nav a:hover span {
  transform: translateY(0) scale(2);
}

.navbar-nav a span:nth-child(1) {
  --n: 1;
}

.navbar-nav a span:nth-child(2) {
  --n: 2;
}

.navbar-nav a span:nth-child(3) {
  --n: 3;
}

.navbar-nav a span:nth-child(4) {
  --n: 4;
}



{
  /* <button className="btn-navbar">
        <a href="/">
          <FontAwesomeIcon icon={faArrowLeft} /> &nbsp; Home Page
        </a>
      </button> */
}

